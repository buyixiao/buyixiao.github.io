<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BuyiXiao&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/d8d183d1caef8e675edc72dbd213a438</icon>
  
  <link href="https://buyixiao.github.io/atom.xml" rel="self"/>
  
  <link href="https://buyixiao.github.io/"/>
  <updated>2025-04-26T08:17:15.856Z</updated>
  <id>https://buyixiao.github.io/</id>
  
  <author>
    <name>BuyiXiao</name>
    <email>2391527690@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Facebook 帖子数据采集</title>
    <link href="https://buyixiao.github.io/blog/facebook-keyword-checkin-post-spider.html"/>
    <id>https://buyixiao.github.io/blog/facebook-keyword-checkin-post-spider.html</id>
    <published>2025-04-26T07:45:29.000Z</published>
    <updated>2025-04-26T08:17:15.856Z</updated>
    
    <content type="html"><![CDATA[<p>Facebook 作为世界上最大的社交平台，相比于 twitter，数据种类更加繁多，关系网络愈加复杂。</p><p>下面从<strong>学术研究</strong>和<strong>实际应用</strong>两个角度，简洁阐述一下<strong>采集 Facebook（脸书）关键词、话题与地理签到帖子</strong>的研究意义：</p><hr><h2 id="🎯-一、研究意义概述"><a href="#🎯-一、研究意义概述" class="headerlink" title="🎯 一、研究意义概述"></a>🎯 一、研究意义概述</h2><h3 id="✅-1-社交媒体文本：洞察情绪与舆情"><a href="#✅-1-社交媒体文本：洞察情绪与舆情" class="headerlink" title="✅ 1. 社交媒体文本：洞察情绪与舆情"></a>✅ 1. <strong>社交媒体文本：洞察情绪与舆情</strong></h3><ul><li>脸书用户主动发布的<strong>公开状态、评论和话题</strong>可以反映他们的：<ul><li>情绪变化（如焦虑、愤怒、喜悦）</li><li>观点立场（如选举、社会事件、文化态度）</li><li>兴趣关注（如旅游、美食、品牌）</li></ul></li></ul><p>通过关键词与主题建模（如 LDA），可以深入理解某一时期、某一人群在特定话题上的倾向。</p><hr><h3 id="✅-2-地理签到数据：构建行为画像与区域热度"><a href="#✅-2-地理签到数据：构建行为画像与区域热度" class="headerlink" title="✅ 2. 地理签到数据：构建行为画像与区域热度"></a>✅ 2. <strong>地理签到数据：构建行为画像与区域热度</strong></h3><ul><li>Facebook 的<strong>地理签到（check-in）或带定位的帖子</strong>，使得研究者可以将“语言”与“地点”联系起来：<ul><li>分析人们<strong>在什么地方说什么内容</strong></li><li>绘制<strong>城市情绪热力图</strong></li><li>挖掘特定地点的<strong>打卡行为与活动模式</strong></li></ul></li></ul><p>这在城市研究、旅游规划、疫情监测等方面具有高价值。</p><hr><h3 id="✅-3-社会行为建模与事件预测"><a href="#✅-3-社会行为建模与事件预测" class="headerlink" title="✅ 3. 社会行为建模与事件预测"></a>✅ 3. <strong>社会行为建模与事件预测</strong></h3><ul><li>高频关键词配合时间线，可以反推出事件发展趋势</li><li>某些地点话题突变，可能预示着抗议、活动、灾害等事件爆发</li><li>配合图神经网络，可以进行<strong>社会图谱构建与演化分析</strong></li></ul><hr><h2 id="🧠-二、典型研究-应用方向"><a href="#🧠-二、典型研究-应用方向" class="headerlink" title="🧠 二、典型研究/应用方向"></a>🧠 二、典型研究/应用方向</h2><table><thead><tr><th>研究方向</th><th>示例价值</th></tr></thead><tbody><tr><td>舆情演变分析</td><td>疫情、选举、公共事件中民众态度走向</td></tr><tr><td>城市空间热度分析</td><td>哪些地点打卡频繁？配合文字内容可得“情绪地图”</td></tr><tr><td>品牌传播/市场营销分析</td><td>消费者在哪些场景中谈论某品牌？话题是正面还是负面？</td></tr><tr><td>文化迁移与地理流动研究</td><td>用户从哪里迁移到哪里？在不同文化地标发了什么内容？</td></tr><tr><td>地理语言学研究</td><td>哪些地区的人更偏向使用某些词语或表情？</td></tr></tbody></table><h2 id="🛶-三、Facebook-数据采集服务"><a href="#🛶-三、Facebook-数据采集服务" class="headerlink" title="🛶 三、Facebook 数据采集服务"></a>🛶 三、Facebook 数据采集服务</h2><p>本博主开发了一套完整的 facebook 的帖子数据采集系统，可以采集任意时间段下，任意关键词/任意话题/任意公共主页等的帖子数据和任意地理位置的签到帖子数据，字段主要包括：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">帖子 <span class="built_in">id</span></span><br><span class="line">帖子链接</span><br><span class="line">帖子发布时间</span><br><span class="line">帖子正文</span><br><span class="line">帖子图片链接</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">帖子作者 <span class="built_in">id</span></span><br><span class="line">帖子作者用户名</span><br><span class="line">帖子作者链接</span><br><span class="line"></span><br><span class="line">帖子分享数</span><br><span class="line">帖子评论数</span><br><span class="line">帖子点赞数</span><br></pre></td></tr></table></figure><p>当然，也可以采集指定帖子 id 下面的评论，字段主要有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">评论 id</span><br><span class="line">评论内容</span><br><span class="line">评论发布时间</span><br><span class="line">评论用户 id</span><br><span class="line">评论用户名</span><br><span class="line">评论回复数</span><br><span class="line">评论点赞数</span><br></pre></td></tr></table></figure><p>这套服务目前已服务不少国内外高校老师，</p><p>个性化定制需求，最终交付数据，支持对公转账，可开发票，</p><p>有相关需求的欢迎博客下方评论，如果回复不及时可前往爱发电平台私聊：</p><blockquote><p><a href="https://afdian.com/a/buyixiao">https://afdian.com/a/buyixiao</a></p></blockquote><p>只服务正规科研论文数据分析、数据支持的行业咨询需求，灰产勿扰！灰产勿扰！灰产勿扰！</p>]]></content>
    
    
    <summary type="html">facebook 关键词/地理位置签到/话题/公共主页 帖子采集</summary>
    
    
    
    <category term="Spider" scheme="https://buyixiao.github.io/categories/Spider/"/>
    
    
    <category term="spider" scheme="https://buyixiao.github.io/tags/spider/"/>
    
    <category term="check-in" scheme="https://buyixiao.github.io/tags/check-in/"/>
    
    <category term="facebook" scheme="https://buyixiao.github.io/tags/facebook/"/>
    
    <category term="posts" scheme="https://buyixiao.github.io/tags/posts/"/>
    
    <category term="keyword" scheme="https://buyixiao.github.io/tags/keyword/"/>
    
  </entry>
  
  <entry>
    <title>Twitter/X 推文数据采集</title>
    <link href="https://buyixiao.github.io/blog/twitter-x-keyword-checkin-spider.html"/>
    <id>https://buyixiao.github.io/blog/twitter-x-keyword-checkin-spider.html</id>
    <published>2025-04-26T06:33:13.000Z</published>
    <updated>2025-04-26T08:17:45.906Z</updated>
    
    <content type="html"><![CDATA[<p>在社交媒体蓬勃发展的今天，推特X（原Twitter）作为全球最大的社交平台之一，每天都在产生海量的用户数据。这些数据不仅包含用户的文字表达，还涵盖了丰富的地理信息。</p><p>文本数据不只是冰冷的语言，它也反映了平台用户的情感和偏好，</p><p>而文本附带的签到数据也绝不仅仅只是数字，它还代表着人类行为、迁徙轨迹等等。</p><p>本人开发了一套完整的推特 X 关键词推文、地理签到推文采集系统，经过多年多版本迭代，已日趋成熟稳定，能够根据需求大小弹性伸缩采集能力，保持成本与数据量的协调，在不考虑消耗成本的情况下，单日推文采集量可达千万数量级。</p><p>相对于推特 X 官方的企业版 api 价格起步 42,000 美元，成本非常高昂，我们的采集成本仅为其 1/n。</p><p>而且我们的采集字段非常丰富，可采集多达约 100 个字段信息，部分字段列表如下，不同字段组合需求价格不一，视最终定制需求字段而定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">推文 <span class="built_in">id</span></span><br><span class="line">推文链接</span><br><span class="line">推文发布时间</span><br><span class="line">推文正文</span><br><span class="line">推文发布来源</span><br><span class="line">推文标签</span><br><span class="line">推文图片链接</span><br><span class="line">推文视频链接</span><br><span class="line">推文提及用户</span><br><span class="line">推文地理签到信息</span><br><span class="line">推文语言</span><br><span class="line">推文浏览量</span><br><span class="line">推文评论数</span><br><span class="line">推文转发数</span><br><span class="line">推文点赞数</span><br><span class="line">推文引用数</span><br><span class="line">推文书签数</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">引用推文 <span class="built_in">id</span></span><br><span class="line">引用推文正文</span><br><span class="line">引用推文链接</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">评论推文 <span class="built_in">id</span></span><br><span class="line">评论推文正文</span><br><span class="line">评论推文链接</span><br><span class="line"></span><br><span class="line">推文作者 <span class="built_in">id</span></span><br><span class="line">推文作者用户名</span><br><span class="line">推文作者昵称</span><br><span class="line">推文作者链接</span><br><span class="line">推文作者简介</span><br><span class="line">推文作者关注数</span><br><span class="line">推文作者粉丝数</span><br><span class="line">推文作者所在地</span><br><span class="line">推文作者注册时间</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们的系统目前已服务众多国内外高校老师和学生，以及一些咨询类型企业，</p><p>定制个性化需求，最终交付数据，支持对公转账，可开发票，</p><p>有相关需求的欢迎博客下方评论，如果回复不及时可前往爱发电平台私聊：</p><blockquote><p><a href="https://afdian.com/a/buyixiao">https://afdian.com/a/buyixiao</a></p></blockquote><p>只服务正规科研论文数据分析、数据支持的行业咨询需求，灰产勿扰！灰产勿扰！灰产勿扰！</p><p>以下是本文的英文翻译：</p><p>Below is the English translation version of this article:</p><hr><p>In today’s era of booming social media, <strong>Twitter X</strong> (formerly Twitter), as one of the largest social platforms globally, generates a massive volume of user data every day.<br> This data not only includes users’ textual expressions but also contains rich geographical information.</p><p>Textual data is more than just cold language — it reflects users’ <strong>emotions and preferences</strong> on the platform.<br> Meanwhile, text combined with <strong>location check-in data</strong> represents far more than just numbers; it captures <strong>human behavior, migration patterns</strong>, and much more.</p><p>I have developed a <strong>complete system</strong> for <strong>collecting keyword-based tweets</strong> and <strong>location check-in tweets</strong> on Twitter X.<br> After years of iterative upgrades across multiple versions, the system has become mature and stable.<br> It can <strong>dynamically scale</strong> based on data volume needs, balancing <strong>cost and efficiency</strong>.<br> Without cost constraints, the system can collect <strong>tens of millions of tweets per day</strong>.</p><p>In comparison, the official <strong>Twitter X Enterprise API</strong> starts at <strong>$42,000 USD per month</strong>, making it extremely expensive.<br> Our solution operates at just <strong>1/n</strong> of that cost.</p><p>Furthermore, the fields we collect are highly detailed — we can capture <strong>up to around 100 different attributes</strong> per tweet.<br> Here’s a partial list (the final pricing depends on the specific combination of required fields):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Tweet ID</span><br><span class="line">Tweet URL</span><br><span class="line">Tweet Publish Time</span><br><span class="line">Tweet Text Content</span><br><span class="line">Tweet Source</span><br><span class="line">Tweet Hashtags</span><br><span class="line">Tweet Image Links</span><br><span class="line">Tweet Video Links</span><br><span class="line">Mentioned Users</span><br><span class="line">Tweet Geo Check-<span class="keyword">in</span> Information</span><br><span class="line">Tweet Language</span><br><span class="line">Tweet View Count</span><br><span class="line">Tweet Comment Count</span><br><span class="line">Tweet Retweet Count</span><br><span class="line">Tweet Like Count</span><br><span class="line">Tweet Quote Count</span><br><span class="line">Tweet Bookmark Count</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Quoted Tweet ID</span><br><span class="line">Quoted Tweet Text</span><br><span class="line">Quoted Tweet URL</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Reply Tweet ID</span><br><span class="line">Reply Tweet Text</span><br><span class="line">Reply Tweet URL</span><br><span class="line"></span><br><span class="line">Tweet Author ID</span><br><span class="line">Tweet Author Username</span><br><span class="line">Tweet Author Display Name</span><br><span class="line">Tweet Author Profile Link</span><br><span class="line">Tweet Author Bio</span><br><span class="line">Tweet Author Following Count</span><br><span class="line">Tweet Author Follower Count</span><br><span class="line">Tweet Author Location</span><br><span class="line">Tweet Author Registration Time</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Our system has already supported <strong>many researchers</strong>, <strong>university professors</strong>, <strong>students</strong>, and <strong>consulting companies</strong> both domestically and internationally.<br> We accept <strong>corporate payments</strong> and can issue <strong>official invoices</strong>.</p><p>If you are interested, feel free to leave a comment below the blog post.<br> If there is no timely reply, you can also contact me privately via the Afdian platform:</p><blockquote><p><a href="https://afdian.com/a/buyixiao">https://afdian.com/a/buyixiao</a></p></blockquote><p><strong>We only provide services for legitimate academic research, data analysis, and industry consulting needs.<br> Illegal/gray market users are strictly not served.</strong></p>]]></content>
    
    
    <summary type="html">推特关键词推文、地理签到推文、推文评论定制采集</summary>
    
    
    
    <category term="Spider" scheme="https://buyixiao.github.io/categories/Spider/"/>
    
    
    <category term="x" scheme="https://buyixiao.github.io/tags/x/"/>
    
    <category term="twitter" scheme="https://buyixiao.github.io/tags/twitter/"/>
    
    <category term="spider" scheme="https://buyixiao.github.io/tags/spider/"/>
    
    <category term="Keyword" scheme="https://buyixiao.github.io/tags/Keyword/"/>
    
    <category term="check-in" scheme="https://buyixiao.github.io/tags/check-in/"/>
    
  </entry>
  
  <entry>
    <title>都是哪些人在关注小米 SU7</title>
    <link href="https://buyixiao.github.io/blog/xiaomi-auto-fans-portrait.html"/>
    <id>https://buyixiao.github.io/blog/xiaomi-auto-fans-portrait.html</id>
    <published>2024-04-03T11:59:47.000Z</published>
    <updated>2024-04-03T14:01:18.704Z</updated>
    
    <content type="html"><![CDATA[<p>近来最火热的话题莫过于小米发布的 SU7，无论是 SU7 发布会当天的直播间人气，还是 24 小时 SU7 的大定数目，都让小米汽车吸引了无数关注。</p><p>使用 Python3 爬虫采集了「小米汽车」微博的 50000+ 粉丝，对 profile 的多个维度进行了可视分析，构建简单的用户画像分析如下：</p><blockquote><p>以下分析只针对这 50000+ 粉丝，不能代表整体~</p></blockquote><div class="note default modern"><p>前篇一：<a href="https://buyixiao.github.io/blog/ljq-fans-portrait.html">「李佳琦」微博粉丝画像简析</a></p><p>前篇二：<a href="https://buyixiao.github.io/blog/brother-yang-fans-portrait.html">「疯狂小杨哥」微博粉丝画像简析</a></p></div><ol><li>粉丝性别比为男女 13:4 ，大概就是男 3 女 1 的比例，小米的粉丝群主主要理工男居多，这很合理，不过与李佳琦粉丝男 1 女 2 的比例相比男粉比例翻了一倍多，和小杨哥男 3 女 2 相比也高出 10 多个百分点。</li><li>粉丝大部分（约 93%）是普通用户，约 2.2% 是明星名人，约 4.2% 是其他认证用户，比起前面两位大 V 粉丝中名人达人的比例，小米汽车差不多翻倍。</li><li>阳光信用上信用中上（信用较好及以上）比例 69%，信用中下（信用一般及以下）的占比约 30%，粉丝阳光信用之高可见一斑。</li><li>粉丝 ip 属地省份分布上，集中分布在广东、江苏、浙江、山东、河南等经济或人口大省，广东一骑绝尘占比超过 10%，江苏、浙江、山东均在 5% 上下。</li><li>粉丝就读或毕业学校上，武汉大学遥遥领先稳高居 top1，这很大程度上应该要归结于雷军强大的校友光环，同城双子星的华科则差不多是武大占比一半。</li><li>在粉丝的微博注册时间分布上，注册微博 10 年以上的粉丝居然占比最大，注册 3 年左右的粉丝占比最小。</li><li>去除了 1965 年以前和 2015 年以后的噪声数据，粉丝出生年份整体呈现以 1998 年为均值的正态分布，尤其集中在 1995-2000 年，95 后最粉雷军，00 后比例直接腰斩。</li><li>只有约四成的粉丝的粉丝数小于 10，有 116 个粉丝数超过 10w 的小大 V 关注了他。</li><li>最后是用户粉丝画像的词云图，浓浓的科技风，正是雷军的好友圈和他那理工男拥趸者。</li></ol><p>综上所述，关注小米 SU7 Auto 的粉丝各项指标遥遥领先。</p><p>可视化效果图如下，加载可能较慢，可以交互~</p><iframe width="100%" height="3690" scrolling="auto" frameborder="0" src="../assets/html5/xiaomi_auto_fans_analysis.html"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近来最火热的话题莫过于小米发布的 SU7，无论是 SU7 发布会当天的直播间人气，还是 24 小时 SU7 的大定数目，都让小米汽车吸引了无数关注。&lt;/p&gt;
&lt;p&gt;使用 Python3 爬虫采集了「小米汽车」微博的 50000+ 粉丝，对 profile 的多个维度进行了可</summary>
      
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="数据分析" scheme="https://buyixiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="echarts" scheme="https://buyixiao.github.io/tags/echarts/"/>
    
    <category term="粉丝画像" scheme="https://buyixiao.github.io/tags/%E7%B2%89%E4%B8%9D%E7%94%BB%E5%83%8F/"/>
    
    <category term="小米 SU7" scheme="https://buyixiao.github.io/tags/%E5%B0%8F%E7%B1%B3-SU7/"/>
    
    <category term="雷军" scheme="https://buyixiao.github.io/tags/%E9%9B%B7%E5%86%9B/"/>
    
    <category term="米粉" scheme="https://buyixiao.github.io/tags/%E7%B1%B3%E7%B2%89/"/>
    
  </entry>
  
  <entry>
    <title>「疯狂小杨哥」微博粉丝画像简析</title>
    <link href="https://buyixiao.github.io/blog/brother-yang-fans-portrait.html"/>
    <id>https://buyixiao.github.io/blog/brother-yang-fans-portrait.html</id>
    <published>2023-11-24T03:00:00.000Z</published>
    <updated>2023-11-24T03:28:43.594Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇，<a href="https://buyixiao.github.io/blog/ljq-fans-portrait.html">李佳琦微博粉丝画像简析</a> 继续使用 Python3 爬虫采集了「疯狂小杨哥」微博的 10000+ 粉丝，对 profile 的多个维度进行了可视分析，构建简单的用户画像对比李佳琦分析如下：</p><blockquote><p>以下分析只针对这 10000+ 粉丝，不能代表整体~</p></blockquote><ol><li>粉丝性别比为男女 7:5 ，大概就是男 3 女 2 的比例，男粉居然比女粉还多，这与微博整体或者李佳琦的用户画像都有些出入。</li><li>粉丝大部分（~98%）是普通用户，0.6% 是明星名人，1.5% 是其他认证用户，普通比例相比于李佳琦较多 1%，认证用户较少 1%。</li><li>阳光信用上信用中上（信用较好及以上）比例 23%，信用中下（信用一般及以下）的占比约 67%，信用较低的粉丝甚至超过了一半，相比于李佳琦粉丝有所反转。</li><li>粉丝 ip 属地省份分布上，集中分布在广东、江苏、浙江、山东、河南等经济或人口大省。</li><li>粉丝就读或毕业学校上，top 3 为清华大学、北京大学、四川大学，top 30 也是清一色的名校，这里面原因应该挺多的，欢迎在评论区畅所欲言。我觉得有一点是名校生更倾向于在自己的社交主页上公开自己的母校。</li><li>差不多一半的粉丝的微博是近一年注册的，不超过十分之一的粉丝注册微博超过了十年。</li><li>去除了 1965 年以前和 2015 年以后的噪声数据，粉丝出生年份整体呈现以 2003 年为均值的正态分布，尤其集中在 1998-2008 年；出生高峰年份整体比李佳琦粉丝晚了 3 年。</li><li>约八成的粉丝的粉丝数小于 10，有 8 个粉丝数超过 10w 的小大 V 关注了他，目测大部分的大 V 是没有采集到的。</li></ol><p>可视化效果图如下，加载可能较慢，可以交互~</p><iframe width="100%" height="3160" scrolling="auto" frameborder="0" src="../assets/html5/brother_yang_fans_analysis.html"></iframe>]]></content>
    
    
    <summary type="html">采集疯狂小杨哥上万微博粉丝数据，浅析用户画像</summary>
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="数据分析" scheme="https://buyixiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="echarts" scheme="https://buyixiao.github.io/tags/echarts/"/>
    
    <category term="粉丝画像" scheme="https://buyixiao.github.io/tags/%E7%B2%89%E4%B8%9D%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>微博 spammer 账号识别模型</title>
    <link href="https://buyixiao.github.io/blog/weibo-spammer-account-identify-model.html"/>
    <id>https://buyixiao.github.io/blog/weibo-spammer-account-identify-model.html</id>
    <published>2023-11-05T11:58:57.000Z</published>
    <updated>2023-11-05T12:09:49.206Z</updated>
    
    <content type="html"><![CDATA[<p>用过 twitter 的 <strong>botometer</strong> 的同学都知道，botometer 可以通过检测 twitter 帐户的活动评价该账号属于垃圾内容制造者的可能性。</p><blockquote><p>botometer 应该更倾向于社交机器人识别，而笔者在构建微博账号数据集的时候，更倾向于 spammer 识别，即虽然它是一个 bot 账号，但是内容和互动都正常，视为非 spammer 账号标记。</p></blockquote><p>但是据笔者所知（可能笔者孤陋寡闻），weibo 并没有对应的产品或服务。于是我从 2022.12 开始着手训练微博 spammer 账号识别模型：检测微博账号是 spammer 的可能性，一共经历了三个阶段，前面两个阶段如下：</p><ol><li>手动构建初始化数据集，只采用微博账号 profile 页面的粉丝数、关注数、微博数、认证类型、阳光信用等等特征，使用 DNN 神经网络，施以 PCA 降维和 L2 正则化，最终训练的准确率在 85% 左右。</li><li>继续扩充数据集，同时新增关系网络、微博文本采集并抽取相应特征，准确率来到 95%，但是多层关系网络的抓取等比较耗时，一个微博账号的特征信息采集抽取和识别耗时上百秒，无法做到实时识别；所以我舍弃了部分抓取耗时的字段，最终准确率固定在 90% 上下。</li></ol><p>一般来说，提升一个模型的 ACC、ROC、F1，通常具有以下方法</p><ol><li>扩充数据集。</li><li>降维。</li><li>正则化</li></ol><p>正则化我在初代模型就已经用上了，最开始模型甚至不收敛，使用正则化收敛后的最终模型准确率在 85% 左右。</p><p>降维对这个 spammer 模型来说可能只是加快了训练过程，实测准确率并没有显著提升。</p><p>而扩充数据集是一直在做的工作，目前可能还需要一个量变等到质变的时刻。</p><p>对于一个模型能提升准确率的方法都做了，所有我只能换另外一个模型方法来做提升了。</p><p>最终选定 AdaBoost，他是三种集成学习 <strong>Bagging</strong>、<strong>Boosting</strong>、<strong>Stacking</strong> 之一的 Boosting 方法下的一种名为 “Adaptive Boosting”方法（自适应增强）的缩写。</p><p>Boosting 的核心思想是 三个臭皮匠，赛过诸葛亮。一般来说，找到弱学习算法要相对容易一些，然后通过反复学习得到一系列弱分类器，组合这些弱分类器得到一个强分类器。</p><p>AdaBoost 算法的流程不算简单，感兴趣的可以搜索下。</p><p>最终我用 AdaBoost，在和上一篇推送一样，只抓取有限不耗时特征的前提下，准确率从 90% 左右直接稳定到了 95%+，识别一个给定 uid 的微博账号的 spammer 属性，耗时在 5s 以内。</p><p>最后把这个最新模型上线，视作  alpha 版本，上篇推送的模型为一般版本，长期测试 alpha 版本后，最后会覆盖一般版本。</p><p>模型网页测试地址为</p><blockquote><p><a href="https://weibo-crawl-visual.buyixiao.xyz/weibo-spammer-evaluator">https://weibo-crawl-visual.buyixiao.xyz/weibo-spammer-evaluator</a></p></blockquote><p>其中第一个 tab 是一般版本，最后一个 tab 为 alpha 版本。</p><p>同时新增了 API 接口调用，接口地址是：</p><blockquote><p><a href="https://api.buyixiao.xyz/weibo/spammer-account-evaluate">https://api.buyixiao.xyz/weibo/spammer-account-evaluate</a></p></blockquote><p>使用 Python 调用该接口的 demo 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test_token = <span class="string">&quot;在此处填入你申请的 token&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_spammer_evaluate</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    resp = requests.get(url=<span class="string">f&#x27;https://api.buyixiao.xyz/weibo/spammer-account-evaluate&#x27;</span>, params=&#123;</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: user_id, <span class="comment"># 必选参数，检测的微博账号 id</span></span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: test_token, <span class="comment"># 必选参数，校验接口</span></span><br><span class="line">        <span class="string">&#x27;alpha&#x27;</span>: true <span class="comment"># 可选参数，是否采用最新的 alpha 内测模型</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(resp.url)</span><br><span class="line">    <span class="built_in">print</span>(resp.json())</span><br><span class="line">test_spammer_evaluate(user_id=<span class="string">&quot;2557129567&quot;</span>)</span><br></pre></td></tr></table></figure><p>网页可以输入单个微博账号的 uid 免费测试，而 token 的申请是按量付费的。</p>]]></content>
    
    
    <summary type="html">从构建数据集到训练模型，以及不断提升准确度的一次实践</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="spammer" scheme="https://buyixiao.github.io/tags/spammer/"/>
    
    <category term="深度学习" scheme="https://buyixiao.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="adaboost" scheme="https://buyixiao.github.io/tags/adaboost/"/>
    
  </entry>
  
  <entry>
    <title>再读《湖心亭看雪》</title>
    <link href="https://buyixiao.github.io/blog/watching-snow-with-middle-lake-pavilion.html"/>
    <id>https://buyixiao.github.io/blog/watching-snow-with-middle-lake-pavilion.html</id>
    <published>2023-11-03T02:27:53.000Z</published>
    <updated>2023-11-03T02:41:35.966Z</updated>
    
    <content type="html"><![CDATA[<p>少年时初读到张岱的《湖心亭看雪》，被词中的闲情雅致感染到了，更增加了一份对西湖的向往之情。</p><blockquote><p>崇祯五年十二月，余住西湖。大雪三日，湖中人鸟声俱绝。是日更定矣，余拏一小舟，拥毳衣炉火，独往湖心亭看雪。雾凇沆砀，天与云与山与水，上下一白，湖上影子，惟长堤一痕、湖心亭一点、与余舟一芥、舟中人两三粒而已。(余拏 一作：余挐)　　</p><p>到亭上，有两人铺毡对坐，一童子烧酒炉正沸。见余大喜曰：“湖中焉得更有此人！”拉余同饮。余强饮三大白而别。问其姓氏，是金陵人，客此。及下船，舟子喃喃曰：“莫说相公痴，更有痴似相公者。”——明代·张岱《湖心亭看雪》</p></blockquote><p>第一句就是崇祯五年十二月，那时只知道崇祯是个明朝皇帝，从词中的闲情雅致推测出这应该是个和平年代。</p><p>直到我很多年后读了明末历史，除了知道崇祯皇帝叫朱由检是个急性子，知道了努尔哈赤和皇太极的雄才大略，以及熊廷弼、袁崇焕、孙承宗、录象升悲壮可惜，还知道了崇祯五年后不过十余年，满清的战火就烧到了杭州西湖湖心亭所在的江浙，这天下最柔软的腹部。</p><p>这之后我偶然再读到《湖心亭看雪》，就下意识地搜索了这首词的创作背景，才知道它并不是崇祯年间创作出来的，是明亡张岱后寄托追忆故国所作。</p><blockquote><p>《湖心亭看雪》是《陶庵梦忆》中的一篇，而《陶庵梦忆》成书于明亡后，乾隆四十年（1794年）才出版，是张岱于潦倒中所撰之回忆录。</p></blockquote><p>李叔同有一首词《送别》，</p><blockquote><p>晚风拂柳笛声残，夕阳山外山</p><p>天之涯，地之角，知交半零落</p><p>人生难得是欢聚，唯有别离多</p><p>长亭外，古道边，芳草碧连天</p><p>问君此去几时还，来时莫徘徊</p><p>天之涯，地之角，知交半零落</p><p>一壶浊洒尽余欢，今宵别梦寒</p></blockquote><p>后来被改编成歌谣，有一位文学家席慕容，在她的初中时代常常唱，其中有一句被他父亲听成了：</p><blockquote><p>长城外，古道边，芳草碧连天</p></blockquote><p>直到某一天她纠正父亲的错误，</p><blockquote><p>我把音乐课本拿出来，想要向父亲证明他的错误。可是父亲并不要看，他只是很懊丧地对我说：</p><p>“好可惜！我一直以为是长城外，以为写的是我们老家，所以第一次听这首歌时就特别地感动，并且一直没有忘记，想不到竟然这么多年是听错了，好可惜！”</p><p>父亲一连说了两个好可惜，然后就走开了，留我一个人站在空空的屋子里，不知道如何是好。</p></blockquote><p>我是个明史爱好者，更是一个精明人（精神明朝人），再读《湖心亭看雪》的些许怅然若失的心境，大抵和席慕容父亲有一点点相似。</p>]]></content>
    
    
    <summary type="html">莫说相公痴，更有痴似相公者</summary>
    
    
    
    <category term="随笔" scheme="https://buyixiao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="湖心亭看雪" scheme="https://buyixiao.github.io/tags/%E6%B9%96%E5%BF%83%E4%BA%AD%E7%9C%8B%E9%9B%AA/"/>
    
    <category term="明史" scheme="https://buyixiao.github.io/tags/%E6%98%8E%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>老将军，可知天水姜伯约？</title>
    <link href="https://buyixiao.github.io/blog/jiang-wei-in-three-kingdoms.html"/>
    <id>https://buyixiao.github.io/blog/jiang-wei-in-three-kingdoms.html</id>
    <published>2023-10-06T09:53:34.000Z</published>
    <updated>2023-10-06T11:31:01.097Z</updated>
    
    <content type="html"><![CDATA[<p>和三国的故事由来已久，最开始还是免不得那一句俗套，三国演义，四大名著，中小学必读本，小学的时候就拿到过一本文言文版本的三国演义，但是小学生的我对于这个满篇文言文实在提不起太大兴趣，从头读起剧情毫无起伏太乏味，索性浏览目录只看自己感兴趣的章节，什么桃园三结义、放水淹七军、空城计，都是英雄演义的经典篇章，然后就把书扔在一边积灰了。</p><p>再后来准备上初中，偶然看到一句，少不读水浒，老不读三国，于是下决心在这豆蔻年华的时候从头到尾读一遍三国，以后老了就不读了，可惜这决心下得还是不够大，细读完黄巾起义，粗读完白帝城后，又作罢，因为当时我觉得刘备死了三国演义就应该完本了，为什么后面还要写，读书人的情怀还是有那么一点，虽然说不上嚎啕大哭但是依稀记得当时眼角有泪。</p><p>大概上初中的时候，高希希拍了新版三国演义，在当时很火，因为是普通话我也看到很起劲，感觉像是困扰多年的病根被根除了，豁然开朗，一口气看到秋风五丈原，然后又不开朗且又流泪了。</p><p>高中的时候经室友介绍知道了老版三国的存在（因为当时没有网络，电视台不播的话基本不了解），然后又机缘巧合弄到一张碟片，刚开始看到老版本的场景和服饰，我就立刻按下了 DVD 机的弹出按钮，毕竟老三国审美，对于一个正值青春年华，爱鲜衣爱怒马，好华灯好烟火的少年来说，是难以接受的。</p><p>这样的认知一直持续到大学毕业，工作无聊的时候喜欢看点历史，就又看到了老版三国，这次非但没有厌恶服化道，反而出了奇地喜爱，这大概就是王羲之所说的情随事迁。</p><p>一刷的时候，开始（有机会）注意到一个人：姜维，对话赵云那一句，“老将军，可知天水姜伯约？”</p><p>尽显这位天水麒麟儿的少年神采，少年时一次看到刘备死、又看到诸葛亮死，这次看到姜维死，也差不多是全剧终，又流泪了，这是经历了社会敲打的成年人的泪水。</p><mark class="hl-label orange">臣，一心讨贼，以继诸葛丞相之遗志！</mark> <mark class="hl-label green">我有一计，可使汉室，幽而复明！</mark> <mark class="hl-label pink">我计不成，乃天命也！</mark> <p><img src="https://s2.loli.net/2023/10/06/KpAfZSbz9akT7UC.jpg" alt="jiangwei_old.jpg"></p><p>他从未见过先帝，却能为先帝的夙愿奉献一生；他原是魏将，却成季汉最后的大将军；他明知不可为而为之，是个彻彻底底的理想主义者，和刘关张、诸葛亮一样，为匡扶汉室，燃烧了自己所有。</p><p>”周公恐惧流言日，王莽谦恭未篡时”，尚未盖棺定论之前，他恐怕是蜀汉一些人眼中的奸臣，劳民伤财，可零和博弈，搏一搏至少还有机会，躺平最后只能投降。“宁可战死失社稷，绝不拱手让江山”，某种意义上，大将军姜维和北地王刘谌是更合适的君臣搭配，可历史不给机会。</p><p>于是乎，姜维死，大汉亡。类似的剧情发生在约 1400 年后，李定国身死，大明亡。</p><p>“蜀国之灭，绝非将军之罪，实是后主无道而致”，卫瓘这样评价道，然后无数后人点了点赞。</p>]]></content>
    
    
    <summary type="html">我有一计，可使汉室，幽而复明</summary>
    
    
    
    <category term="随笔" scheme="https://buyixiao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="姜维" scheme="https://buyixiao.github.io/tags/%E5%A7%9C%E7%BB%B4/"/>
    
    <category term="三国演义" scheme="https://buyixiao.github.io/tags/%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>「李佳琦」微博粉丝画像简析</title>
    <link href="https://buyixiao.github.io/blog/ljq-fans-portrait.html"/>
    <id>https://buyixiao.github.io/blog/ljq-fans-portrait.html</id>
    <published>2023-10-01T07:05:58.000Z</published>
    <updated>2023-11-24T03:08:57.130Z</updated>
    
    <content type="html"><![CDATA[<p>编写 Python3 爬虫采集了李佳琦微博的 10000+ 粉丝，对 profile 的多个维度进行了可视分析，视图构建简单的用户画像如下：</p><ol><li>粉丝性别比为男女 7:13 ，大概就是男 1 女 2 的比例，这和微博整体的用户画像一致，没有因为是美妆博主而女粉占比过多。</li><li>粉丝大部分（~97%）是普通用户，约 1% 是明星名人，2% 是其他认证用户。</li><li>阳光信用上信用中上比例 60%，信用中下的占比约 4  成。</li><li>粉丝 ip 属地省份分布上，集中分布在广东、江苏、浙江、山东、河南等经济或人口大省。</li><li>粉丝就读或毕业学校上，top 3 为清华大学、北京大学、山东大学，top 30 也是清一色的名校，这里面原因应该挺多的，欢迎在评论区畅所欲言。我觉得有一点是名校生更倾向于在自己的社交主页上公开自己的母校。</li><li>约六分之一的粉丝的微博是近一年注册的，有超过十分之一的粉丝注册微博超过了十年。</li><li>去除了 1965 年以前和 2015 年以后的噪声数据，粉丝出生年份整体呈现以 2000 年为均值的正态分布，尤其集中在 1995-2005 年。1970 年是一个小高峰的原因是 1970 年是计算机计时开始时间也是默认时间，至于 1990 年为什么是小高峰有待考量。</li><li>约六成的粉丝的粉丝数小于 10，有 6 个粉丝数超过 10w 的小大 V 关注了他，目测大部分的大 V 是没有采集到的。</li></ol><p>可视化效果图如下，加载可能较慢，可以交互~</p><iframe width="100%" height="3160" scrolling="auto" frameborder="0" src="../assets/html5/ljq_fans_analysis.html"></iframe>]]></content>
    
    
    <summary type="html">采集李佳琦上万微博粉丝数据，浅析用户画像</summary>
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="数据分析" scheme="https://buyixiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="echarts" scheme="https://buyixiao.github.io/tags/echarts/"/>
    
    <category term="粉丝画像" scheme="https://buyixiao.github.io/tags/%E7%B2%89%E4%B8%9D%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>pandas 绘制非数值类型饼图</title>
    <link href="https://buyixiao.github.io/blog/pandas-pie-plot.html"/>
    <id>https://buyixiao.github.io/blog/pandas-pie-plot.html</id>
    <published>2023-09-20T12:30:47.000Z</published>
    <updated>2023-09-20T13:18:12.161Z</updated>
    
    <content type="html"><![CDATA[<p>Excel 能够画饼图，但是限于本列数据为数值类型，对于非数值类型 (non-numeric type) 则无能无力，pandas 作为 excel 的代码版本，当然没有这个限制~</p><p>对于数值类型的列，可以直接用下面一行代码完成饼图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot.pie(y=<span class="string">&#x27;col_name&#x27;</span>, figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>如果 <code>col_name</code> 是非数值列，代码会报以下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: <span class="string">&#x27;&lt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span></span><br></pre></td></tr></table></figure><p>下面这个是 Matplotlib 画饼图的 MVP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体和负号正常显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">sns.set_context(<span class="string">&quot;paper&quot;</span>)</span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>)</span><br><span class="line">sns.<span class="built_in">set</span>(font=<span class="string">&#x27;SimHei&#x27;</span>)  <span class="comment"># 解决Seaborn中文显示问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pie_plot</span>(<span class="params">values, labels, title</span>):</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正圆</span></span><br><span class="line">    plt.axes(aspect=<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.pie(values, labels=labels, autopct=<span class="string">&#x27;%.1f%%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.title(title)</span><br><span class="line"></span><br><span class="line">    plt.legend()</span><br></pre></td></tr></table></figure><p>需要用胶水将 pandas 的指定列和这个函数关联起来，胶水之一是 <code>value_counts</code> ，它可以对一列数据的值做字典统计，另外就是<code>unique()</code>，可以列举出某列的所有非重复值，这两份胶水分别对应这个函数的 <code>values</code> 和 <code>labels</code> 参数~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pie_plot(df[<span class="string">&#x27;source&#x27;</span>].value_counts().values, df[<span class="string">&#x27;source&#x27;</span>].unique(), <span class="string">&#x27;发布机型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>但是还有一个隐藏的问题是，<code>value_counts</code> 不会统计 <code>nan</code> ，但是 <code>unique</code> 会统计 <code>nan</code>，如果不去除 <code>nan</code> 会造成 <code>value_counts().values</code> 和 <code>unique</code> 长度不一样~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除 nan 等空值</span></span><br><span class="line">df.dropna(how=<span class="string">&#x27;any&#x27;</span>, subset=[<span class="string">&#x27;source&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pie_plot(df[<span class="string">&#x27;source&#x27;</span>].value_counts().values, df[<span class="string">&#x27;source&#x27;</span>].unique(), <span class="string">&#x27;发布机型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最后还有一个优化的点，为了保证图例标签的连续性，可以先给该列排个序~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除 nan 等空值</span></span><br><span class="line">df.dropna(how=<span class="string">&#x27;any&#x27;</span>, subset=[<span class="string">&#x27;source&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">df.sort_values(by=<span class="string">f&#x27;source&#x27;</span>, ascending=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pie_plot(df[<span class="string">&#x27;source&#x27;</span>].value_counts().values, df[<span class="string">&#x27;source&#x27;</span>].unique(), <span class="string">&#x27;发布机型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>笔者已经把这个小逻辑做成了一个网页小工具，可以在网页上传 CSV 文件，选择任意列（要求该列的值不超过 50 类，可多选）画饼图，可选 AntV、Echarts、Matplotlib 三种画图引擎，网页地址如下：</p><blockquote><p><a href="https://tools.buyixiao.xyz/pie-ploter">https://tools.buyixiao.xyz/pie-ploter</a></p></blockquote><p>欢迎尝试~</p>]]></content>
    
    
    <summary type="html">pandas 作图（本质是 matplotlib）</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="matplotlib" scheme="https://buyixiao.github.io/tags/matplotlib/"/>
    
    <category term="pandas" scheme="https://buyixiao.github.io/tags/pandas/"/>
    
    <category term="value_counts" scheme="https://buyixiao.github.io/tags/value-counts/"/>
    
    <category term="chart" scheme="https://buyixiao.github.io/tags/chart/"/>
    
    <category term="pie" scheme="https://buyixiao.github.io/tags/pie/"/>
    
  </entry>
  
  <entry>
    <title>近来敬佩两种人</title>
    <link href="https://buyixiao.github.io/blog/two-types-of-people-admired.html"/>
    <id>https://buyixiao.github.io/blog/two-types-of-people-admired.html</id>
    <published>2023-09-12T13:11:01.000Z</published>
    <updated>2023-09-13T03:32:51.660Z</updated>
    
    <content type="html"><![CDATA[<p>近些日子的所见所闻，带来少许所思所想，让我对两种人的敬佩之情油然而生。</p><p>第一种的代表人物是陈行甲，可能是最近有关他的报道日多，说他如何出淤泥而不染，看到报道正文里富于魔幻现实主义的情节和评论区难得一见的发自内心的各色各样的赞美之词，我是完全相信这个事实的，但最后真正让我震撼的，是我在抖音上刷到了他发的一些视频。</p><p>他最近才开通了抖音账号，记录自己因为做公益而在祖国各地奔走的瞬间，视频看到他的精气神，那是一种浩然正气，只有做事不愧天地的人，才有这种精神面貌，我更加确信古人的一句话，「君子坦荡荡，小人常戚戚」。</p><p>这类人，我在「虽千万人吾往矣」的萧峰身上见过，在「艰难奋长戟，万古用一夫」的郭靖身上也见过；这类人，往往都比较天真，可是天真往往是道德的上限；这类人，我把他们称之为「正气者」，虽不能至，吾心向往。</p><p>第二种的人的代表是老爷子任正非，任正非一直是我偶像，但是最近才听到下面这个桥段，大意是：在百万大军裁撤的时代洪流下，作为团职干部的任正非也没能避免被裹挟，按照当时的惯例，到地方后找个正处的工作没有问题，但是他到的是深圳，只能给副处，任老爷子就不答应了，义正言辞提出正处的要求被拒绝后，一生气就不干了，索性创办了华为。苏秦曰：「使我有洛阳二顷田，焉能配六国相印？」</p><p>我不禁想到了当下这个时局，某种意义上就和当年任老爷子处境一样，大家都被推着走的时候，都在被迫内卷而争取一张在当时看来是豪华邮轮的船票的时候，任老爷子划上了他的独木舟，开始了他的大航海，这类人，我尊之为「破局者」。</p><p>而对于包含我自己在内的绝大部分普通人来说，竟为一船票庸碌小半生，航海家是不会真正上岸的，要么发现新大陆，要么就魂归大海。</p><blockquote><p>其实这篇胡说八道，可以起个另外的标题，「不进体制的两个理由」，</p><p>一个原因是这两类人都是从体制内跳出来的，另一个原因是我的长辈在不遗余力地劝我进体制内。</p></blockquote>]]></content>
    
    
    <summary type="html">正气者，破局者</summary>
    
    
    
    <category term="随笔" scheme="https://buyixiao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="悟" scheme="https://buyixiao.github.io/tags/%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>TFBoys 易烊千玺、王源、王俊凯微博粉丝重叠度可视化</title>
    <link href="https://buyixiao.github.io/blog/tfboys-fans-overlap-visual.html"/>
    <id>https://buyixiao.github.io/blog/tfboys-fans-overlap-visual.html</id>
    <published>2023-07-21T11:36:53.000Z</published>
    <updated>2023-07-21T13:36:39.944Z</updated>
    
    <content type="html"><![CDATA[<p>编写了 Python3 爬虫，分别采集了 TF-Boys 的三小只易烊千玺、王源、王俊凯各 11000+ 粉丝累计 33000+ 粉丝，然后进行了粉丝重叠度可视化，同时对粉丝的性别、属地、账号注册时间信息作了对比可视化。</p><p>三小只粉丝重叠度的韦恩图如下：</p><p><img src="https://s2.loli.net/2023/07/21/LcGTZAxjKO1uHmQ.png" alt="tfboys-fans-overlap.png"></p><p>三人共同粉丝在各自的总粉丝中占比五分之一（1999 除以 11000）左右，其中易烊千玺和王俊凯两人的粉丝重叠度达到了惊人的三分之一以上（4277 除以 11000）。</p><p>下面是粉丝性别构成占比、属地分布和账号注册时长对比的可视化，结论如下：</p><ol><li>三小只的男女粉比例大致为 1:2，其中王源的男女粉比例最大，即男粉比例最大，女粉比例最小。顺嘴提一句，从上面的韦恩图看出来王源和其他两人的粉丝重合度也是相对最少的。</li><li>三小只的粉丝属地分布中，东北和西北地区的粉丝明显比东南和西南少，其中山东、河南、广东位于前三甲，有人详细解释下为什么吗?</li><li>三小只中，易烊千玺 的粉丝中注册微博 2 年或者 5 年以上的占比明显比其他两人多，换句话说，易烊千玺粉丝中微博是新号的占比最少。</li></ol><p>可视化效果图如下，加载可能较慢，可以交互~</p><iframe width="100%" height="1580" scrolling="auto" frameborder="0" src="../assets/html5/tfboys_fans_analysis.html"></iframe>]]></content>
    
    
    <summary type="html">抓取三小只的三万余微博粉丝，进行可视分析</summary>
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="粉丝重叠度" scheme="https://buyixiao.github.io/tags/%E7%B2%89%E4%B8%9D%E9%87%8D%E5%8F%A0%E5%BA%A6/"/>
    
    <category term="数据分析" scheme="https://buyixiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib 折线图颜色分段显示</title>
    <link href="https://buyixiao.github.io/blog/matplotlib-segmented-color-graph.html"/>
    <id>https://buyixiao.github.io/blog/matplotlib-segmented-color-graph.html</id>
    <published>2023-05-13T08:40:58.000Z</published>
    <updated>2023-07-23T03:41:38.200Z</updated>
    
    <content type="html"><![CDATA[<p>近来需要画一个多段折线图，并且每段颜色都不一样，搜索得知，大部分已有的实现都是基于 <code>matplotlib</code> 的<code>LineCollection</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> LineCollection</span><br></pre></td></tr></table></figure><p>这种方式还要自己组装 segments ，略显晦涩，索性自己实现了。效果如下：</p><p><img src="https://s2.loli.net/2023/05/13/7LDzWrkYbZjK4Gx.png" alt="segmented-color buyixiao blog"></p><p>其中 x，y 序列大致如下，没什么特殊的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x</span><br><span class="line"> [<span class="string">&#x27;2023-02-06 12&#x27;</span>, <span class="string">&#x27;2023-02-06 18&#x27;</span>, <span class="string">&#x27;2023-02-07 00&#x27;</span>, <span class="string">&#x27;2023-02-07 06&#x27;</span>, <span class="string">&#x27;2023-02-07 12&#x27;</span>, <span class="string">&#x27;2023-02-07 18&#x27;</span>, <span class="string">&#x27;2023-02-08 00&#x27;</span>, <span class="string">&#x27;2023-02-08 06&#x27;</span>, <span class="string">&#x27;2023-02-08 12&#x27;</span>, <span class="string">&#x27;2023-02-08 18&#x27;</span>, <span class="string">&#x27;2023-02-09 00&#x27;</span>, <span class="string">&#x27;2023-02-09 06&#x27;</span>, <span class="string">&#x27;2023-02-09 12&#x27;</span>, <span class="string">&#x27;2023-02-09 18&#x27;</span>, <span class="string">&#x27;2023-02-10 00&#x27;</span>, <span class="string">&#x27;2023-02-10 06&#x27;</span>, <span class="string">&#x27;2023-02-10 12&#x27;</span>, <span class="string">&#x27;2023-02-10 18&#x27;</span>, <span class="string">&#x27;2023-02-11 00&#x27;</span>, <span class="string">&#x27;2023-02-11 06&#x27;</span>, <span class="string">&#x27;2023-02-11 12&#x27;</span>, <span class="string">&#x27;2023-02-11 18&#x27;</span>, <span class="string">&#x27;2023-02-12 00&#x27;</span>, <span class="string">&#x27;2023-02-12 06&#x27;</span>, <span class="string">&#x27;2023-02-12 12&#x27;</span>, <span class="string">&#x27;2023-02-12 18&#x27;</span>, <span class="string">&#x27;2023-02-13 00&#x27;</span>, <span class="string">&#x27;2023-02-13 06&#x27;</span>, <span class="string">&#x27;2023-02-13 12&#x27;</span>, <span class="string">&#x27;2023-02-13 18&#x27;</span>, <span class="string">&#x27;2023-02-14 00&#x27;</span>, <span class="string">&#x27;2023-02-14 06&#x27;</span>, <span class="string">&#x27;2023-02-14 12&#x27;</span>, <span class="string">&#x27;2023-02-14 18&#x27;</span>, <span class="string">&#x27;2023-02-15 00&#x27;</span>, <span class="string">&#x27;2023-02-15 06&#x27;</span>, <span class="string">&#x27;2023-02-15 12&#x27;</span>, <span class="string">&#x27;2023-02-15 18&#x27;</span>, <span class="string">&#x27;2023-02-16 00&#x27;</span>, <span class="string">&#x27;2023-02-16 06&#x27;</span>, <span class="string">&#x27;2023-02-16 12&#x27;</span>, <span class="string">&#x27;2023-02-16 18&#x27;</span>, <span class="string">&#x27;2023-02-17 00&#x27;</span>, <span class="string">&#x27;2023-02-17 06&#x27;</span>, ...]</span><br><span class="line"> </span><br><span class="line"> y</span><br><span class="line">  [   <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">3</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">4</span>  <span class="number">375</span>   <span class="number">83</span>  <span class="number">145</span>   <span class="number">15</span>  <span class="number">197</span>  <span class="number">264</span></span><br><span class="line">  <span class="number">135</span>   <span class="number">47</span>  <span class="number">164</span>   <span class="number">69</span>  <span class="number">116</span>   <span class="number">39</span>  <span class="number">109</span>   <span class="number">41</span>   <span class="number">54</span>   <span class="number">16</span>   <span class="number">20</span>   <span class="number">13</span>   <span class="number">27</span>   <span class="number">17.</span>..]</span><br></pre></td></tr></table></figure><h3 id="均分多段"><a href="#均分多段" class="headerlink" title="均分多段"></a>均分多段</h3><p>第一种需求是均分多段，即等分折现，其实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:           inspurer(月小水长)</span></span><br><span class="line"><span class="comment"># create_time:      2023/5/13 14:31</span></span><br><span class="line"><span class="comment"># 运行环境           Python3.6+</span></span><br><span class="line"><span class="comment"># github            https://github.com/inspurer</span></span><br><span class="line"><span class="comment"># website           https://buyixiao.github.io/</span></span><br><span class="line"><span class="comment"># 微信公众号         月小水长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> ticker</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_color</span>():</span></span><br><span class="line">    <span class="keyword">return</span> plt.cm.gist_ncar(np.random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_colored_seg</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        均分多段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x\n&#x27;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y\n&#x27;</span>, y)</span><br><span class="line"></span><br><span class="line">    seg_x_list = []</span><br><span class="line">    seg_y_list = []</span><br><span class="line"></span><br><span class="line">    max_x = <span class="built_in">max</span>(x)</span><br><span class="line">    max_y = <span class="built_in">max</span>(y)</span><br><span class="line"></span><br><span class="line">    seg_cnt = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    seg_label = [<span class="string">f&#x27;the label of <span class="subst">&#123;i&#125;</span>th turning point&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(seg_cnt)]</span><br><span class="line"></span><br><span class="line">    seg_point_cnt = <span class="built_in">len</span>(x) // seg_cnt</span><br><span class="line"></span><br><span class="line">    cur_seg_pointer = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(seg_x_list) &lt; seg_point_cnt <span class="keyword">and</span> index &lt; <span class="built_in">len</span>(x) - <span class="number">1</span>:</span><br><span class="line">            seg_x_list.append(ele)</span><br><span class="line">            seg_y_list.append(y[index])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur_color = unique_color()</span><br><span class="line">            plt.plot(seg_x_list, seg_y_list, color=cur_color)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur_seg_pointer &lt; seg_cnt:</span><br><span class="line">                plt.axvline(x[index - <span class="number">1</span>], color=cur_color, linestyle=<span class="string">&quot;dashed&quot;</span>)</span><br><span class="line">                plt.text(x[index - <span class="number">1</span>], max_y // <span class="number">1.5</span>, seg_label[cur_seg_pointer], fontsize=<span class="number">12</span>,</span><br><span class="line">                         ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            seg_x_list = [x[index - <span class="number">1</span>]]</span><br><span class="line">            seg_y_list = [y[index - <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">            cur_seg_pointer += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">50</span>))</span><br><span class="line">    plt.ylim((<span class="number">0</span>, max_y))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;per 6h&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;period weibo cnt&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to prepare your own x,y list</span></span><br><span class="line">plot_colored_seg([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ts_6h.index.strftime(<span class="string">&#x27;%Y-%m-%d %H&#x27;</span>)], ts_6h.values)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="值分多段"><a href="#值分多段" class="headerlink" title="值分多段"></a>值分多段</h3><p>第二种是值分多段，即按照 x 或者 y 的值划分多段，这种更灵活，可以说是均分多段的超集，其源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:           inspurer(月小水长)</span></span><br><span class="line"><span class="comment"># create_time:      2023/5/13 14:31</span></span><br><span class="line"><span class="comment"># 运行环境           Python3.6+</span></span><br><span class="line"><span class="comment"># github            https://github.com/inspurer</span></span><br><span class="line"><span class="comment"># website           https://buyixiao.github.io/</span></span><br><span class="line"><span class="comment"># 微信公众号         月小水长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> ticker</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_color</span>():</span></span><br><span class="line">    <span class="keyword">return</span> plt.cm.gist_ncar(np.random.random())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_colored_seg_2</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        值分多段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x\n&#x27;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y\n&#x27;</span>, y)</span><br><span class="line"></span><br><span class="line">    seg_x_list = []</span><br><span class="line">    seg_y_list = []</span><br><span class="line"></span><br><span class="line">    max_x = <span class="built_in">max</span>(x)</span><br><span class="line">    max_y = <span class="built_in">max</span>(y)</span><br><span class="line"></span><br><span class="line">    turn_points_x = [<span class="string">&#x27;2023-03-07 06&#x27;</span>, <span class="string">&#x27;2023-03-16 12&#x27;</span>, <span class="string">&#x27;2023-04-08 06&#x27;</span>]</span><br><span class="line">    seg_color_list = [unique_color() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(turn_points_x))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ele <span class="keyword">in</span> turn_points_x:</span><br><span class="line">            turn_index = turn_points_x.index(ele)</span><br><span class="line">            cur_color = seg_color_list[turn_index]</span><br><span class="line">            plt.plot(seg_x_list, seg_y_list, color=cur_color)</span><br><span class="line">            plt.axvline(x[index - <span class="number">1</span>], color=cur_color, linestyle=<span class="string">&quot;dashed&quot;</span>)</span><br><span class="line">            plt.text(x[index - <span class="number">1</span>], max_y // <span class="number">1.5</span>, <span class="string">f&#x27;the label of <span class="subst">&#123;turn_index + <span class="number">1</span>&#125;</span>th turning point&#x27;</span>, fontsize=<span class="number">12</span>,</span><br><span class="line">                     ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            seg_x_list = [x[index - <span class="number">1</span>]]</span><br><span class="line">            seg_y_list = [y[index - <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            seg_x_list.append(ele)</span><br><span class="line">            seg_y_list.append(y[index])</span><br><span class="line"></span><br><span class="line">    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">50</span>))</span><br><span class="line">    plt.ylim((<span class="number">0</span>, max_y))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;per 6h&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;period weibo cnt&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">   </span><br><span class="line"><span class="comment"># to prepare your own x,y list</span></span><br><span class="line">plot_colored_seg_2([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ts_6h.index.strftime(<span class="string">&#x27;%Y-%m-%d %H&#x27;</span>)], ts_6h.values)</span><br></pre></td></tr></table></figure><p>转载请注明来源，如有更好的思路，欢迎留言~</p>]]></content>
    
    
    <summary type="html">一种通俗易懂的分段颜色折线图实现</summary>
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="python" scheme="https://buyixiao.github.io/tags/python/"/>
    
    <category term="matplotlib" scheme="https://buyixiao.github.io/tags/matplotlib/"/>
    
    <category term="segmented-color" scheme="https://buyixiao.github.io/tags/segmented-color/"/>
    
    <category term="line-graph" scheme="https://buyixiao.github.io/tags/line-graph/"/>
    
  </entry>
  
  <entry>
    <title>pandas 将 json 转成 csv</title>
    <link href="https://buyixiao.github.io/blog/convert-json-to-csv.html"/>
    <id>https://buyixiao.github.io/blog/convert-json-to-csv.html</id>
    <published>2023-04-22T13:44:22.000Z</published>
    <updated>2023-07-21T15:03:48.054Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享的是 <a href="https://buyixiao.github.io/tags/pandas/">【月小水长】pandas 三十六计系列</a> 的第八篇 ，一个小工具，将 json 文件转成 csv 文件。</p><p>文件格式是表，文件内容是里，只要里子一样，外表是可以像穿衣一样随便换的，就像在 MySQL 中，可以任意导入导出 SQL、csv、json 等文件一样。</p><p>假设我们有一个这样的 json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;4893424946515214&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mid&quot;</span>: <span class="string">&quot;4893424946515214&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;weibo_link&quot;</span>: <span class="string">&quot;https://weibo.com/2803301701/MDcporkU6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;据悉，全城月季花已逐渐进入盛花期。&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;publish_time&quot;</span>: <span class="string">&quot;2023-04-22 20:34:45&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_link&quot;</span>: <span class="string">&quot;https://weibo.com/u/2803301701&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;人民日报&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;reposts_count&quot;</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="attr">&quot;comments_count&quot;</span>: <span class="number">92</span>,</span><br><span class="line">    <span class="attr">&quot;attitudes_count&quot;</span>: <span class="number">298</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;4893416880346795&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mid&quot;</span>: <span class="string">&quot;4893416880346795&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;weibo_link&quot;</span>: <span class="string">&quot;https://weibo.com/2803301701/MDcco1sdt&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;4月22日，陕西西安。游客发视频... &quot;</span>,</span><br><span class="line">    <span class="attr">&quot;publish_time&quot;</span>: <span class="string">&quot;2023-04-22 20:02:42&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_link&quot;</span>: <span class="string">&quot;https://weibo.com/u/2803301701&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;人民日报&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;reposts_count&quot;</span>: <span class="number">119</span>,</span><br><span class="line">    <span class="attr">&quot;comments_count&quot;</span>: <span class="number">249</span>,</span><br><span class="line">    <span class="attr">&quot;attitudes_count&quot;</span>: <span class="number">785</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;4893410513127118&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mid&quot;</span>: <span class="string">&quot;4893410513127118&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;weibo_link&quot;</span>: <span class="string">&quot;https://weibo.com/2803301701/MDc27d7vo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;第54个世界地球日，江豚回家路还有多远...&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;publish_time&quot;</span>: <span class="string">&quot;2023-04-22 19:37:24&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_link&quot;</span>: <span class="string">&quot;https://weibo.com/u/2803301701&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;人民日报&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;reposts_count&quot;</span>: <span class="number">119</span>,</span><br><span class="line">    <span class="attr">&quot;comments_count&quot;</span>: <span class="number">145</span>,</span><br><span class="line">    <span class="attr">&quot;attitudes_count&quot;</span>: <span class="number">463</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要转成下面这样的 csv：</p><table><thead><tr><th>mid</th><th>weibo_link</th><th>text</th><th>publish_time</th><th>user_link</th><th>user_name</th><th>reposts_count</th><th>comments_count</th><th>attitudes_count</th></tr></thead><tbody><tr><td>4893424946515214</td><td><a href="https://weibo.com/2803301701/MDcporkU6">https://weibo.com/2803301701/MDcporkU6</a></td><td>据悉，全城月季花已逐渐进入盛花期。</td><td>2023-04-22 20:34:45</td><td><a href="https://weibo.com/u/2803301701">https://weibo.com/u/2803301701</a></td><td>人民日报</td><td>55</td><td>92</td><td>298</td></tr><tr><td>4893416880346795</td><td><a href="https://weibo.com/2803301701/MDcco1sdt">https://weibo.com/2803301701/MDcco1sdt</a></td><td>4月22日，陕西西安。游客发视频…</td><td>2023-04-22 20:02:42</td><td><a href="https://weibo.com/u/2803301701">https://weibo.com/u/2803301701</a></td><td>人民日报</td><td>119</td><td>249</td><td>785</td></tr><tr><td>4893410513127118</td><td><a href="https://weibo.com/2803301701/MDc27d7vo">https://weibo.com/2803301701/MDc27d7vo</a></td><td>第54个世界地球日，江豚回家路还有多远…</td><td>2023-04-22 19:37:24</td><td><a href="https://weibo.com/u/2803301701">https://weibo.com/u/2803301701</a></td><td>人民日报</td><td>119</td><td>145</td><td>463</td></tr></tbody></table><p>只需要运行下面这份代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:           inspurer(月小水长)</span></span><br><span class="line"><span class="comment"># create_time:      2023/4/22 20:49</span></span><br><span class="line"><span class="comment"># 运行环境           Python3.6+</span></span><br><span class="line"><span class="comment"># github            https://github.com/inspurer</span></span><br><span class="line"><span class="comment"># website           https://buyixiao.github.io/</span></span><br><span class="line"><span class="comment"># 微信公众号         月小水长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_json_to_csv</span>(<span class="params">input_json_path, output_csv_path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_json_path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        input_json = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    data_cols = input_json[<span class="built_in">list</span>(input_json.keys())[<span class="number">0</span>]].keys()</span><br><span class="line">    <span class="keyword">for</span> a_weibo <span class="keyword">in</span> input_json.values():</span><br><span class="line">        data_list.append(<span class="built_in">list</span>(a_weibo.values()))</span><br><span class="line">    df = pd.DataFrame(data_list, columns=data_cols)</span><br><span class="line"></span><br><span class="line">    df.to_csv(output_csv_path, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">convert_json_to_csv(<span class="string">&#x27;./data/2803301701.json&#x27;</span>, <span class="string">&#x27;./data/2803301701.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中没有指定 csv 的任何列名，自动从 json 文件中获取，具有一定的普适性。</p>]]></content>
    
    
    <summary type="html">无需指定 columns 转 json 成 csv，具有一定的普适性</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="pandas" scheme="https://buyixiao.github.io/tags/pandas/"/>
    
    <category term="json" scheme="https://buyixiao.github.io/tags/json/"/>
    
    <category term="csv" scheme="https://buyixiao.github.io/tags/csv/"/>
    
    <category term="文件转换" scheme="https://buyixiao.github.io/tags/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>pandas 缺失值的识别和处理</title>
    <link href="https://buyixiao.github.io/blog/pandas-na-tricks.html"/>
    <id>https://buyixiao.github.io/blog/pandas-na-tricks.html</id>
    <published>2023-04-10T08:51:42.000Z</published>
    <updated>2023-04-10T09:25:58.148Z</updated>
    
    <content type="html"><![CDATA[<p> dataframe 中的缺失值非常常见，很有必要掌握精准识别和处理确实值的技巧。</p><h3 id="识别缺失值"><a href="#识别缺失值" class="headerlink" title="识别缺失值"></a>识别缺失值</h3><p>pandas 会将诸如 <code>NaN</code>、<code>null</code>、<code>None</code>、<code>NA</code> 等值视为缺失值，但是在实践中，类似 <code>init</code> 、<code>暂无</code>、<code>缺失</code> 等这样的值，我们也视为缺失值，怎么把这个认知喂给 pandas 呢，有两个办法。</p><p>第一种方法是在读取文件时，比如 <code>read_csv()</code>，有一个参数 <code>na_values</code>，它接受一个 list 列表，里面的每一个值就是我们要新增的缺失值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;demo.csv&#x27;</span>,na_values=[<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;暂无&#x27;</span>])</span><br></pre></td></tr></table></figure><p>第二个方法是读取文件后，使用 replace，如果有很多个，不可避免要使用 for 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.replace(<span class="string">&#x27;init&#x27;</span>, np.nan, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h3><p>两种思路，一种是去除缺失值、另外一种是填充缺失值。</p><h4 id="去除缺失值"><a href="#去除缺失值" class="headerlink" title="去除缺失值"></a>去除缺失值</h4><p>dataframe 内置了这个方法 <code>dropna()</code> ，第一个参数 axis 是老生常谈的了，会经常遇到，简单来说 axis =0 （默认值）就是一行一行的处理，axis=1 就是一列一列的处理；第二个参数 inplace 更加常见，取值 False（默认值） 时返回修改后的 dataframe，取值 True 意即原地修改，也就没有返回值。最后一个参数 how 取值为 <code>all</code>、<code>any</code> 之一，前一个意思为如果这一行所有的 item 都是缺失值才去除，后者条件更加宽松：只有某一行有一个 item 是缺失值就去除。</p><h4 id="填充缺失值"><a href="#填充缺失值" class="headerlink" title="填充缺失值"></a>填充缺失值</h4><p>常见的填充方式也有两种，第一种是使用同列的平均值、或者中位数填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># price 列的缺失值用均值代替</span></span><br><span class="line">df.fillna(&#123;<span class="string">&#x27;price&#x27;</span>: df[<span class="string">&#x27;price&#x27;</span>].mean()&#125;)</span><br></pre></td></tr></table></figure><p>另外一种是在该列使用插值，此种方式更为优雅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;price&#x27;</span>] = df[<span class="string">&#x27;price&#x27;</span>].interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br></pre></td></tr></table></figure><p>method 可以取值为：</p><ul><li><code>slinear</code>、<code>linear</code>：线性插值</li><li><code>nearest</code>：最邻近插值法</li><li>更多取值的可以参考官方文档</li></ul>]]></content>
    
    
    <summary type="html">精准识别和恰当处理 dataframe 中的缺失值的 tricks 分享</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="pandas" scheme="https://buyixiao.github.io/tags/pandas/"/>
    
    <category term="NA" scheme="https://buyixiao.github.io/tags/NA/"/>
    
    <category term="interpolate" scheme="https://buyixiao.github.io/tags/interpolate/"/>
    
  </entry>
  
  <entry>
    <title>CBDB 历史人物关系和足迹可视化</title>
    <link href="https://buyixiao.github.io/blog/historical-figure-visual.html"/>
    <id>https://buyixiao.github.io/blog/historical-figure-visual.html</id>
    <published>2023-03-14T06:52:25.000Z</published>
    <updated>2023-03-14T07:09:37.438Z</updated>
    
    <content type="html"><![CDATA[<p>中国历代人物传记资料库（CBDB）是在社会学科领域有着鼎鼎大名，它系统性地收入了中国历史上所有重要的传记资料，其项目主页地址如下：</p><p><a href="https://projects.iq.harvard.edu/chinesecbdb">https://projects.iq.harvard.edu/chinesecbdb</a></p><p>我最开始接触到这个数据库还是我大二时候，然后那时我一无所能，面对这么庞大的数据库无从下手。等到后面学了数据库基本原理和技术，以及一点数据分析可视化技巧后，才陆陆续续有了一些可以实现的 idea，于是上周日完成了一些可能相对古早的 idea，一并部署上线，页面地址为：</p><p><a href="https://tools.buyixiao.xyz/historical-figure-query">https://tools.buyixiao.xyz/historical-figure-query</a></p><p>页面长这样，非常简洁。</p><p><img src="https://s2.loli.net/2023/03/14/9wuKHqrjS3ngibY.png"></p><p>页面功能概括如下：只需要输入一个历史人物名（CBDB 共收录 52w 余人），就能生成该人物的社会关系图、亲属关系图以及此人在华夏大地留下的足迹图。</p><p>人海浮沉几万里，此心安处是吾乡，苏东坡的一生，几乎都是在漂泊中度过的。下文将用今天分享的工具，从一个小角度看见大才子。</p><p>在页面上输入苏轼并回车，可得：</p><p><img src="https://s2.loli.net/2023/03/14/7wod2tv3h5xIe9z.png"></p><p>​        苏轼，男，宋朝人，生于公元 1036 年，卒于公元 1101 年，享年 66 岁。</p><p><img src="https://s2.loli.net/2023/03/14/bjIDNFRzM58rum7.png"></p><p>苏轼的社会关系（包括敌人、朋友等等）非常复杂，大部分是诗文雅趣之事，也有惨遭小人攻讦之难。</p><p><img src="https://s2.loli.net/2023/03/14/eN7PkOy3MgxpujE.png"></p><p>相比较之下，苏轼的亲属关系就显得简单许多，这大概和传记对其家人（可能苏洵、苏辙除外）记载并不多。</p><p><img src="https://s2.loli.net/2023/03/14/guAbIxZ5SVw6cz9.png"></p><p>苏轼是四川眉山人，出生于 1036 年，在 1056 年以前，也就是他人生的前二十年，几乎都是在巴山夜雨中度过的，然后前往北宋都城开封应试，遇见伯乐欧阳修，就在他名动京师之时，母亲去世，苏轼携本家一大一小二苏回川奔丧，守丧期满后至凤翔府做官。（如果前往网页，上面的地图可放大缩小，这些旅程可以看得很清）</p><p>因和主持变法的王安石政见不和，自请出任杭州通判，江南风月好哇，于是就有了欲把西湖比西子，有了苏堤春晓、三潭映月，还有那令人垂涎三尺的东坡肉。（按史实考，实际上修浚西湖是他再任杭州时的政绩）</p><p>苏轼说，”古之成大事者，不唯有超世之才，亦必有坚韧不拔之志“，诚不我欺，乌台诗案给予了苏轼沉重打击，被迫下放黄州团练副使，楚水本是凄凉地，触景伤情，可是苏东坡是谁哇，在赤壁古战场，他惊叹，”此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍“；”酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？“，他豁然；”寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风“，他哀伤。当然，他也自嘲，“但少闲人如吾两人耳。”</p><p>毛色日益衰，志气日益微呐，五十九岁的大才子还要被连贬至惠州，岭南何许地也，屈原笔下的莽荒之地，可是此心安处即是他苏东坡的乡，“日啖荔枝三百颗，不辞长作岭南人。”大快朵颐，岂不美哉？值得一提是，苏轼同样给惠州人民带了一个西湖，同为 5A 景区，世人只知杭州西湖，却不知惠州西湖。</p><p>心似浮萍，台海波摇呐，花甲老人被再贬至更偏僻的儋州，孤岛夜月，何其凄怆？可他是筚路蓝缕人。</p><blockquote><p>摘自百度百科：苏轼把儋州当成了自己的第二故乡，“我本儋耳氏，寄生西蜀州”。他在这里办学堂，介学风，以致许多人不远千里，追至儋州，从苏轼学。在宋代一百多年里，海南从没有人进士及第。但苏轼北归不久，这里的姜唐佐就举乡贡。为此苏轼题诗：“沧海何曾断地脉，珠崖从此破天荒。”人们一直把苏轼看作是儋州文化的开拓者、播种人，对他怀有深深的崇敬。</p></blockquote><p>宋徽宗大赦天下，苏轼北归，途经廉州、永州，于 公元1101 年病逝于常州，上述地图中北归旅程清晰可见。</p><p>好的，走远了，这其实是一篇野生的技术文。本文只是以苏轼为例，可以在页面上输入任何历史名人，欢迎大家访问工具页面，复制下述地址到浏览器打开或者点击<a href="https://tools.buyixiao.xyz/historical-figure-query">阅读原文</a>（如果访问不了那就是服务器过载了，稍等就好）</p><p><a href="https://tools.buyixiao.xyz/historical-figure-query">https://tools.buyixiao.xyz/historical-figure-query</a></p>]]></content>
    
    
    <summary type="html">笔者基于 CBDB 数据库开发了一个可视化历史人物的社会关系、亲属关系和人生足迹的网页，「人海浮沉几万里，此心安处是吾乡」，以苏轼为例。</summary>
    
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="可视化" scheme="https://buyixiao.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="CBDB" scheme="https://buyixiao.github.io/tags/CBDB/"/>
    
    <category term="历史人物" scheme="https://buyixiao.github.io/tags/%E5%8E%86%E5%8F%B2%E4%BA%BA%E7%89%A9/"/>
    
    <category term="关系网络" scheme="https://buyixiao.github.io/tags/%E5%85%B3%E7%B3%BB%E7%BD%91%E7%BB%9C/"/>
    
    <category term="生平足迹" scheme="https://buyixiao.github.io/tags/%E7%94%9F%E5%B9%B3%E8%B6%B3%E8%BF%B9/"/>
    
  </entry>
  
  <entry>
    <title>pandas 拆分具有相同结构的 csv</title>
    <link href="https://buyixiao.github.io/blog/split-csv-with-same-columns.html"/>
    <id>https://buyixiao.github.io/blog/split-csv-with-same-columns.html</id>
    <published>2023-03-08T14:47:08.000Z</published>
    <updated>2023-03-08T14:59:50.929Z</updated>
    
    <content type="html"><![CDATA[<p>在教程 <a href="https://buyixiao.github.io/blog/merge-csv-with-same-columns.html">pandas 合并具有相同结构的 csv</a> 中，我们分享了如何将一个文件夹下很多具有相同结构的 csv 文件合并为一个总的 csv 文件的代码，今天分享的是如何从这个总的 csv 文件还原成原来的一堆子文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:           inspurer(月小水长)</span></span><br><span class="line"><span class="comment"># create_time:      2022/8/16 14:07</span></span><br><span class="line"><span class="comment"># 运行环境           Python3.6+</span></span><br><span class="line"><span class="comment"># github            https://github.com/inspurer</span></span><br><span class="line"><span class="comment"># website           https://buyixiao.github.io/</span></span><br><span class="line"><span class="comment"># 微信公众号         月小水长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_file = <span class="string">&#x27;all.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">output_folder = <span class="string">&#x27;result&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">    os.mkdir(output_folder)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(input_file, float_precision=<span class="string">&#x27;round-trip&#x27;</span>)</span><br><span class="line">groups = df.groupby(df[<span class="string">&#x27;origin_file_name&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> group <span class="keyword">in</span> groups:</span><br><span class="line">    group[<span class="number">1</span>].drop(<span class="string">&#x27;origin_file_name&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    group[<span class="number">1</span>].to_csv(os.path.join(output_folder, <span class="string">&#x27;&#123;&#125;.csv&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(group[<span class="number">0</span>]))), index=<span class="literal">False</span>,</span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如有错误欢迎指正，如有更优解决方案请赐教~</p>]]></content>
    
    
    <summary type="html">本系列教程【合并具有相同结构的 csv】的逆过程</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="pandas" scheme="https://buyixiao.github.io/tags/pandas/"/>
    
    <category term="csv 拆分" scheme="https://buyixiao.github.io/tags/csv-%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>【动态规划】刷题记录</title>
    <link href="https://buyixiao.github.io/blog/dynamic-programming-notes.html"/>
    <id>https://buyixiao.github.io/blog/dynamic-programming-notes.html</id>
    <published>2023-02-28T12:51:37.000Z</published>
    <updated>2023-03-01T08:00:55.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h3><p>百度百科解释如下：</p><blockquote><p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。<br>基本思想与策略编辑:<br>由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p></blockquote><p>一篇动态规划 <a href="https://blog.csdn.net/ailaojie/article/details/83014821">博客</a> 阐述如下：</p><blockquote><p>首先是拆分问题，根据问题的可能性把问题划分成一步一步，这样就可以通过递推或者递归来实现.<br>关键就是这个步骤，动态规划有一类问题就是从后往前推到，有时候我们很容易知道:如果只有一种情况时，最佳的选择应该怎么做。然后根据这个最佳选择往前一步推导，得到前一步的最佳选择<br>然后就是定义问题状态和状态之间的关系，我的理解是前面拆分的步骤之间的关系，用一种量化的形式表现出来，类似于高中学的推导公式,因为这种式子很容易用程序写出来，也可以说对程序比较亲和(也就是最后所说的状态转移方程式)<br>我们再来看定义的下面的两段，我的理解是比如我们找到最优解,我们应该讲最优解保存下来，为了往前推导时能够使用前一步的最优解,在这个过程中难免有一些相比于最优解差的解，此时我们应该放弃，只保存最优解，这样我们每一次都把最优解保存了下来，大大降低了时间复杂度。</p></blockquote><p>动态规划与分治法的区别在于划分的子问题是有重叠的，解过程中对于重叠的部分只要求解一次，记录下结果，减少了重复计算过程。<br>另外，DP在求解一个问题最优解时，不是固定的计算合并某些子问题的解，而是根据各子问题的解的情况选择其中最优的。<br>动态规划求解具有以下性质：<br>最优子结构性质：最优解包含了其子问题的最优解，不是合并所有子问题的解，而是找最优的一条解线路，选择部分子最优解来达到最终的最优解。<br>子问题重叠性质：先计算子问题的解，再由子问题的解去构造问题的解（由于子问题存在重叠，把子问题解记录下来为下一步使用，这样就可以从备忘录中读取）。其中备忘录先记录初始状态。</p><h3 id="刷题记录"><a href="#刷题记录" class="headerlink" title="刷题记录"></a>刷题记录</h3><h4 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p>LeetCode 链接：<a href="https://leetcode.cn/problems/longest-increasing-subsequence">https://leetcode.cn/problems/longest-increasing-subsequence</a></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>令状态 dp[i] 表示以 nums[i] 作为末尾的最长递增子序列的长度，考虑边界情况，dp[0] = 1，状态转移方程  <code>dp[i] = max(dp[j]) +1，其中 0&lt;=j&lt;i 且 num[j]&lt;num[i]</code> ，考虑在 j = 0…i-1 取一个最大子序列长度时，因为要求 num[i]  结尾，序列要求递增，则必须 num[i] &gt; num[j]。</p><p>最后，整个数组的最长上升子序列即 dp 数组的最大值。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        dp.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> dp_max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                    temp = <span class="built_in">max</span>(temp, dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            dp_max = <span class="built_in">max</span>(dp_max, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="最大连续子序列和"><a href="#最大连续子序列和" class="headerlink" title="最大连续子序列和"></a>最大连续子序列和</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p>LeetCode 链接：<a href="https://leetcode.cn/problems/maximum-subarray/">https://leetcode.cn/problems/maximum-subarray/</a></p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>令状态 dp[i] 表示以 nums[i] 作为末尾的连续序列的最大和，考虑边界情况，dp[0] = nums[0]，状态转移方程  dp[i] = max(nums[i], dp[i-1] + nums[i])，因为是以 nums[i] 结尾，max 的作用其实就是取舍上一个状态，如果上一个状态小于等于 0，dp[i] = nums[i]。</p><p>求 dp[i] 的同时可以做比较，避免二次循环。</p><h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        dp.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> dp_max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            dp.<span class="built_in">push_back</span>(<span class="built_in">max</span>(nums[i], nums[i]+ dp[i<span class="number">-1</span>]));</span><br><span class="line">            <span class="keyword">if</span>(dp_max &lt; dp[i])&#123;</span><br><span class="line">                dp_max = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p>LeetCode 链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock</a></p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>如果我们真的在买卖股票，我们肯定会想：如果我是在历史最低点买的股票就好了！太好了，在题目中，我们只要用一个变量记录一个历史最低价格 minprice，我们就可以假设自己的股票是在那天买的。那么我们在第 i 天卖出股票能得到的利润就是 prices[i] - minprice。</p><p>因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。</p><p>LeetCode-Solution 链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/</a></p><h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min_v = prices[<span class="number">0</span>], max_b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            max_b = <span class="built_in">max</span>(max_b, prices[i] - min_v);</span><br><span class="line">            min_v = <span class="built_in">min</span>(min_v, prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="卖股票的最佳时机-II"><a href="#卖股票的最佳时机-II" class="headerlink" title="卖股票的最佳时机 II"></a>卖股票的最佳时机 II</h4><p>直接参考：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode-s/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode-s/</a></p><h4 id="UVA-12034-Race"><a href="#UVA-12034-Race" class="headerlink" title="UVA 12034 Race"></a>UVA 12034 Race</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>n 匹马，共有多少种排名情况（可以并列）</p><p>UVA 链接：<a href="https://vjudge.net/problem/UVA-12034">https://vjudge.net/problem/UVA-12034</a></p><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>参考链接：<a href="https://blog.csdn.net/qq_39479426/article/details/81229724">https://blog.csdn.net/qq_39479426/article/details/81229724</a></p><p><code>dp[i][j]</code> 表示 i 匹马占有 j 个名次的组合情况</p><p>然后考虑 i 匹马和 i-1 匹马的转移关系，多了一匹马要放在哪个位置，有下面两种情况</p><p>第 i 匹马和前 i-1 匹马中至少一匹马的成绩相同（j 个名次就有 j 种情况）<br>这匹马独占了一个成绩（可以放入 j 个位置，注意这里不是 j+1）<br>所以可以得到递推式：<code>dp[i][j] = dp[i-1][j] * j + dp[i-1][j-1] * j</code></p><h5 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1050</span>][<span class="number">1050</span>];   <span class="comment">//dp[i][j]表示i只马占有j个名次(i&gt;=j)</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fac[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>; fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    # 求阶乘，i == j = A 时，组合情况就是 A！</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">        fac[i] = (i * fac[i - <span class="number">1</span>]) % <span class="number">10056</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= j)</span><br><span class="line">            <span class="comment">//前i-1只马用完了j个名次,最后一只马有j种选择; 前面i-1只马用了j-1个名次,(j-1)最后一只马独占一个名次,同样有j种选择</span></span><br><span class="line">                dp[i][j] = (dp[i - <span class="number">1</span>][j] * j + dp[i - <span class="number">1</span>][j - <span class="number">1</span>] * j) % <span class="number">10056</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == j)</span><br><span class="line">                dp[i][j] = fac[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            sum = (sum + dp[n][i]) % <span class="number">10056</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %lld\n&quot;</span>, k++, sum);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0/1 背包问题"></a>0/1 背包问题</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><p>给定 n 种物品和一个容量为 C 的背包，物品 i 的重量是 wi，其价值为 vi。问：应该如何选择装入背包的物品，使得装入背包中的物品的总价值最大？</p><h5 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//记忆性数组动态规划解法 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packageSolution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> pc, <span class="keyword">int</span> gvol[], <span class="keyword">int</span> gval[])</span></span>&#123;</span><br><span class="line"><span class="comment">//用 dp[i][j] 表示，取前 i 种物品，总体积不超过 j 的所能取得的最大价值总量 </span></span><br><span class="line"><span class="keyword">int</span> dp[n+<span class="number">1</span>][pc+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 初始化边界条件，也就是第一行，取前 1 种物品，总体积不超过 j 的最大价值总量 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= pc; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(gvol[<span class="number">1</span>]&lt;=j) &#123;</span><br><span class="line">dp[<span class="number">1</span>][j] = gval[<span class="number">1</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt;= pc; j++)&#123;</span><br><span class="line"><span class="comment">// dp[i-1][j] 表示不取第 i 种物品的最大价值</span></span><br><span class="line"><span class="comment">// dp[i-1][j-gvol[i]] + gval[i] 表示取第 i 种物品的最大价值，认真想一下 dp[i][j] i、j 分别表示啥意思，就知道为啥需要 dp[i][j-gvol[i]] 了，体会状态转化的思想</span></span><br><span class="line"><span class="comment">// 只有  (j - gvol[i])&gt;=0 才能取第 i 种 </span></span><br><span class="line"><span class="keyword">if</span>((j - gvol[i])&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j-gvol[i]] + gval[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][pc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//物品个数，背包容量 </span></span><br><span class="line"><span class="keyword">int</span> n, package_capacity;</span><br><span class="line"><span class="comment">//输入一行，两个数字以空格间隔 </span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;package_capacity;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品体积数组、物品价值数组 </span></span><br><span class="line"><span class="keyword">int</span> goods_volumn[n+<span class="number">1</span>], goods_value[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="comment">//输入 n 行，每行两个数字以空格间隔 </span></span><br><span class="line">cin&gt;&gt;goods_volumn[i]&gt;&gt;goods_value[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以 3 个物体，背包容量为 5 为例</span></span><br><span class="line"><span class="comment">//三个物体的体积、价值依次是</span></span><br><span class="line"><span class="comment">//1 3 </span></span><br><span class="line"><span class="comment">//2 1</span></span><br><span class="line"><span class="comment">//3 2 </span></span><br><span class="line"><span class="comment">// 那么会选择第一个和第三个物品，最大价值和为 3+2=5 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;the max total value: &quot;</span>&lt;&lt;<span class="built_in">packageSolution</span>(n, package_capacity, goods_volumn, goods_value);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p>1、北京大学郭炜 MOOC 慕课：<a href="https://www.icourse163.org/learn/PKU-1001894005">https://www.icourse163.org/learn/PKU-1001894005</a></p>]]></content>
    
    
    <summary type="html">动态规划（dynamic programming）算法刷题笔记</summary>
    
    
    
    <category term="算法笔记" scheme="https://buyixiao.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://buyixiao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://buyixiao.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>塞缪尔·厄尔曼：青春</title>
    <link href="https://buyixiao.github.io/blog/youth-by-samuel-ullman.html"/>
    <id>https://buyixiao.github.io/blog/youth-by-samuel-ullman.html</id>
    <published>2023-02-04T08:56:14.000Z</published>
    <updated>2023-02-04T09:11:14.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《青春》作者是德裔美国作家塞缪尔·厄尔曼。</p></blockquote><h2 id="中文译文"><a href="#中文译文" class="headerlink" title="中文译文"></a>中文译文</h2><p>青春不是年华，而是心境；青春不是桃面、丹唇、柔膝，而是深沉的意志、恢宏的想象、炽热的感情；青春是生命的深泉在涌流。</p><p>青春气贯长虹，勇锐盖过怯弱，进取压倒苟安。如此锐气，二十后生有之，六旬男子则更多见。年岁有加，并非垂老；理想丢弃，方堕暮年。岁月悠悠，衰微只及肌肤；热忱抛却，颓唐必致灵魂。忧烦，惶恐，丧失自信，定使心灵扭曲，意气如灰。</p><p>无论年届花甲，抑或二八芳龄，心中皆有生命之欢乐，奇迹之诱惑，孩童般天真久盛不衰。</p><p>人人心中皆有一台天线，只要你从天上人间接受美好、希望、欢乐、勇气和力量的信号，你无不青春永驻、风华长存。</p><p>一旦天线降下，锐气便被冰雪覆盖，玩世不恭、自暴自弃油然而生，即便年方二十，实已垂垂老矣；然则只要竖起天线，捕捉乐观信号，你就有望在八十高龄告别尘寰时仍觉年轻。</p><h2 id="英文原文"><a href="#英文原文" class="headerlink" title="英文原文"></a>英文原文</h2><p>《YOUTH 》 by Samuel Ullman</p><p>Youth is not a time of life; it is a state of mind; it is not a matter of rosy cheeks, red lips and supple knees; it is a matter of the will, a quality of the imagination, a vigor of the emotions; it is the freshness of the deep springs of life.</p><p>Youth means a temperamental predominance of courage over timidity of the appetite, for adventure over the love of ease. This often exists in a man of sixty more than a boy of twenty. Nobody grows old merely by a number of years. We grow old by deserting our ideals.</p><p>Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul. Worry, fear, self-distrust bows the heart and turns the spirit back to dust.</p><p>Whether sixty or sixteen, there is in every human being’s heart the lure of wonder, the unfailing child-like appetite of what’s next, and the joy of the game of living. In the center of your heart and my heart there is a wireless station; so long as it receives messages of beauty, hope, cheer, courage and power from men and from the infinite, so long are you young.</p><p>When the aerials are down, and your spirit is covered with snows of cynicism and the ice of pessimism, then you are grown old, even at twenty, but as long as your aerials are up, to catch the waves of optimism, there is hope you may die young at eighty.</p>]]></content>
    
    
    <summary type="html">青春气贯长虹，勇锐盖过怯弱，进取压倒苟安。</summary>
    
    
    
    <category term="励志" scheme="https://buyixiao.github.io/categories/%E5%8A%B1%E5%BF%97/"/>
    
    
    <category term="青春" scheme="https://buyixiao.github.io/tags/%E9%9D%92%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>crontab 定时执行 Python 脚本踩坑记录</title>
    <link href="https://buyixiao.github.io/blog/crontab-python.html"/>
    <id>https://buyixiao.github.io/blog/crontab-python.html</id>
    <published>2023-02-04T07:28:38.000Z</published>
    <updated>2023-02-04T08:48:57.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>换过几个云服务器，每次都要在 crontab 这折腾一会儿，这次索性把问题记录下来，力求详尽。</p><p>笔者的云服务器：腾讯云 2C4G；</p><p>Linux 系统： Ubuntu 20.04 LTS 64bit。</p><blockquote><p>crontab 是 Linux 下周期性执行的指令，常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为 cron jobs。(摘自百度百科)</p></blockquote><h3 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h3><p>1、cron 的配置文件可在三个地方存放</p><ul><li><code>/var/spool/cron/crontabs/root</code></li><li><code>/etc/crontab</code></li><li><code>/etc/cron.d/</code></li></ul><p>​      一般情况下，通过 crontab -e 命令编辑的是第一个路径下的配置文件，在这里的命令不需要指定用户为 root；后两个则需要，比如命令 <code> 0 3 * * 1 root python test.py</code>，其中的 root 不可少。</p><p>需要注意的是，如果使用 crontab -e 编辑，修改后使用 Ctrl+X，提示：<code>save modified buffer ...?</code>    ，选择 ：yes，又提示：<code>file name to write</code> ，选择：Ctrl+T，在最后一个界面使用左右箭头切换至 crontab。</p><p>2、虽然说编辑完 crontab 文件后不需要重启 cron 服务，但是包括重启在内的一些命令最好还是了解下。</p><ul><li>重启，各种资料都说是 service crond restart，在笔者的环境上实测是 service cron restart；在 centos 上是 systemctl restart crond，笔者暂未考证。</li><li>状态，笔者亲测为 service cron start；其他环境同上。</li></ul><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>使用命令定时执行 python 脚本，每个小时的第 15 分钟运行一次，无任何反应。命令如下：</p><p><code>15 * * * * /mypath/venv/bin/python3 /mypath/monitor.py &gt;&gt; /mypath/execute.log 2&gt;&amp;1</code></p><p>python 脚本输出的 execute.log 亦无输出。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>第一步想着查看 crontab 的日志，才知道默认是不打开的需要手动配置。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rsyslog.d/50-default.conf</span><br><span class="line">cron.*  /var/log/cron.log #将cron前面的注释符去掉</span><br><span class="line"><span class="meta">#</span><span class="bash">重启rsyslog</span></span><br><span class="line">sudo service rsyslog restart</span><br><span class="line">sudo service cron restart</span><br></pre></td></tr></table></figure><p>然后 <code>vi /var/log/cron.log</code> 查看日志，能够发现脚本确实运行了，除此之外没有任何有用信息，看其他博主（参考文末链接2）说是需要安装 postfix，正安装着不知道怎么配置邮件服务器的域名，又看到如果 python 脚本输出配置了重定向日志，不用配这个也行。遂作罢。</p><p>排除了 crontab 的问题，那只有是 python 脚本的问题了，偶然间发现（参考文末链接 3）：python 脚本中涉及到读写文件的动作，一般定时任务都不会执行.；脚本在执行时，由于是通过 crontab 去执行的，它的执行目录会变成当前用户的根目录，如果是root，就会在/root/下执行。</p><p>但是我们读写的文件路径在 root 下吗，大概率不是，一种解决办法是将 python 脚本中的文件路径全部换成服务器绝对路径，但是这样可移植性差；更好的办法是使用 shell 脚本，shell 脚本第一行使用命令 cd 到我们的目的路径，然后第二行修改我们原来的命令（py 脚本的绝对路径也可以简化成相对路径），如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/usr/bin/bash</span></span><br><span class="line">cd /mypath</span><br><span class="line">/mypath/venv/bin/python3 /monitor.py </span><br></pre></td></tr></table></figure><p>使用 <code>chmod a+x test.sh</code> 赋予执行权限，然后在 crontab 配置定时运行这个 shell 脚本，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 * * * * /bin/sh /mypath/test.sh &gt;&gt; /mypath/execute.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>最后可能还有一个坑，查看 execute.log，发现无法 cd 到 mypath，这是因为这个 test.sh 是通过 rz 上传的，不是在服务器上通过 touch 创建的，无法识别，解决办法就在原因中，touch 创建再复制命令就行。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://blog.tankywoo.com/2014/10/05/the-holes-of-crontab.html">一个 crontab 的坑</a></p><p>2、<a href="https://my.oschina.net/leejun2005/blog/1788342">迷之 crontab 异常：不运行、不报错、无日志</a></p><p>3、<a href="https://blog.csdn.net/xys2333/article/details/112469461">crontab运行python脚本不生效问题</a></p>]]></content>
    
    
    <summary type="html">根治 crontab 运行 python 脚本的疑难杂症</summary>
    
    
    
    <category term="Linux" scheme="https://buyixiao.github.io/categories/Linux/"/>
    
    
    <category term="crontab" scheme="https://buyixiao.github.io/tags/crontab/"/>
    
    <category term="python" scheme="https://buyixiao.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pandas groupby filter 函数妙用</title>
    <link href="https://buyixiao.github.io/blog/pandas-groupby-filter.html"/>
    <id>https://buyixiao.github.io/blog/pandas-groupby-filter.html</id>
    <published>2023-01-07T02:26:53.000Z</published>
    <updated>2023-07-21T15:07:20.868Z</updated>
    
    <content type="html"><![CDATA[<p>假设有一个狂人日记的 dataframe 如下：</p><table><thead><tr><th align="center">user_name</th><th align="center">publish_time</th><th align="center">content</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center">2022-12-30 15:10:00</td><td align="center">今天是 2022 年最后一天，我在广东</td></tr><tr><td align="center">小刚</td><td align="center">2022-01-01 12:23:33</td><td align="center">今天是 2022 年第一天，我在加勒比</td></tr><tr><td align="center">小王</td><td align="center">2022-01-01 12:33:00</td><td align="center">今天是 2022 年第一天，我在小刚身边</td></tr><tr><td align="center">小刚</td><td align="center">2023-01-01 02:15:45</td><td align="center">今天是 2023 年第一天，我在百慕大</td></tr><tr><td align="center">小明</td><td align="center">2023-01-01 00:05:20</td><td align="center">今天是 2023 年第一天，我还在广东</td></tr></tbody></table><p>现在我们要统计狂人日记里面，同一作者第一次和最后一次发布时间差大于 30 天的行。</p><p>乍一看，首先必须统计同一作者至少发布两次的行，也就是上一篇<a href="https://buyixiao.github.io/blog/pandas-value-counts.html">value counts</a> 的内容。</p><p>然后再使用 groupby 分组 + filter 过滤实现，这个 filter 相当于 mysql 语句中 groupby 后的 having 语句，是在分组上做筛选的。</p><p>所以在上一篇的基础上，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:           inspurer(月小水长)</span></span><br><span class="line"><span class="comment"># create_time:      2023/1/7 8:58</span></span><br><span class="line"><span class="comment"># 运行环境           Python3.6+</span></span><br><span class="line"><span class="comment"># github            https://github.com/inspurer</span></span><br><span class="line"><span class="comment"># website           https://buyixiao.github.io/</span></span><br><span class="line"><span class="comment"># 微信公众号         月小水长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">input_file = <span class="string">&#x27;./狂人日记 2022.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_show_count_below_n</span>(<span class="params">input_file, col, n=<span class="number">2</span></span>):</span></span><br><span class="line">    df = pd.read_csv(input_file)</span><br><span class="line">    <span class="comment"># 第一步，筛选 user_name 出现大于等于 2 次的行</span></span><br><span class="line">    count_df = pd.DataFrame(df[col].value_counts())</span><br><span class="line">    count_df.columns = [<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">    not_below_n_index = count_df[count_df[<span class="string">&#x27;count&#x27;</span>] &gt;= n].index</span><br><span class="line">    df = df[df[col].isin(not_below_n_index)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 比上一篇新加的內容</span></span><br><span class="line">    df[<span class="string">&#x27;publish_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;publish_time&#x27;</span>]).dt.date</span><br><span class="line">    df = df.groupby(col).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: (x[<span class="string">&#x27;publish_date&#x27;</span>].<span class="built_in">max</span>() - x[<span class="string">&#x27;publish_date&#x27;</span>].<span class="built_in">min</span>()).days &gt; <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    df.to_csv(<span class="string">&#x27;result.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove_show_count_below_n(input_file, col=<span class="string">&#x27;user_name&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>仔细想想，第一步真的有必要吗？如果只出现一次，在第二步 publish_date 相减的时候差值为 0，直接就过滤掉了，所以第一步在这个任务是多此一举。简化代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_interval_filter</span>(<span class="params">input_file, col, days</span>):</span></span><br><span class="line">    df = pd.read_csv(input_file)</span><br><span class="line">    df[<span class="string">&#x27;publish_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;publish_time&#x27;</span>]).dt.date</span><br><span class="line">    df = df.groupby(col).<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: (x[<span class="string">&#x27;publish_date&#x27;</span>].<span class="built_in">max</span>() - x[<span class="string">&#x27;publish_date&#x27;</span>].<span class="built_in">min</span>()).days &gt; days)</span><br><span class="line">    df.to_csv(<span class="string">&#x27;result.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time_interval_filter(input_file, col=<span class="string">&#x27;user_name&#x27;</span>, days=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">筛选出两次时间差大于任意时间的内容</summary>
    
    
    
    <category term="Python" scheme="https://buyixiao.github.io/categories/Python/"/>
    
    
    <category term="filter" scheme="https://buyixiao.github.io/tags/filter/"/>
    
    <category term="groupby" scheme="https://buyixiao.github.io/tags/groupby/"/>
    
    <category term="pandas" scheme="https://buyixiao.github.io/tags/pandas/"/>
    
  </entry>
  
</feed>
